{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,QAC9BC,EAAkBF,SAASC,cAAc,uBACzCE,EAAmBH,SAASC,cAAc,sBAC1CG,EAASJ,SAASC,cAAc,wBAGtC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAGpCJ,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIPR,EAAKe,iBAAiB,UAAU,SAACC,GAC/BA,EAAMC,iBAEN,IADA,IAAIC,EAAQC,SAAShB,EAAgBiB,OAC5BC,EAAI,EAAGA,GAAKhB,EAAOe,MAAOC,IACjCf,EAAce,EAAGH,GACdI,MAAK,SAAAC,G,IAAGhB,EAAQgB,EAARhB,SAAUC,EAAKe,EAALf,MACjBgB,EAAA1B,GAAS2B,OAAOC,QAAQ,uBAAwCC,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,M,IAEvEoB,OAAM,SAAAL,G,IAAGhB,EAAQgB,EAARhB,SAAUC,EAAKe,EAALf,MAClBgB,EAAA1B,GAAS2B,OAAOI,QAAQ,sBAAqCF,OAAfpB,EAAS,QAAYoB,OAANnB,EAAM,M,IAEvEU,GAASC,SAASf,EAAiBgB,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from \"notiflix\";\n\nconst form = document.querySelector('form');\nconst inputFirstDelay = document.querySelector('input[name=\"delay\"]');\nconst inputSecondDelay = document.querySelector('input[name=\"step\"]');\nconst amount = document.querySelector('input[name=\"amount\"]');\n\n  \nfunction createPromise(position, delay) { //ktory promise (numer), opoznienie\n  return new Promise((resolve, reject) => { //zwroc promise resolve lub reject\n    setTimeout(() => { //opoznienie czasowe po jakim sie funkcja wykonuje\n      const shouldResolve = Math.random() > 0.3; //Math.random - wiekszy lub rowno 0 ale mniejszy niz 1\n      if (shouldResolve) { //jesli wylosuje liczbe <1 i >0.3 to jest resolve\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay }); //w przeciwnym wypadku reject\n      }\n    }, delay); //wartosc opoznienia z setTimeout\n  });\n}\n\nform.addEventListener(\"submit\", (event) => { //po kiknieciu w button\n  event.preventDefault();\n  let delay = parseInt(inputFirstDelay.value); //zmienna let = parsuje tekst na liczbe calkowita\n  for (let i = 1; i <= amount.value; i++) { //ilosc promisow, dodawanie po 1\n    createPromise(i, delay) //odwolanie do funkcji createPromise, ktory promise i jego opoznienie\n      .then(({ position, delay }) => { //then obsluguje w praktyce pomyslne wykonanie promise\n        Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => { //w catch wylapujemy bledy\n        Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    delay += parseInt(inputSecondDelay.value); //opoznienie calkowite = opoznienie+opoznienie kolejnej obietnicy wybranej przez uzytkownika\n  }\n});\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$inputFirstDelay","$ce04d3a99e08e73b$var$inputSecondDelay","$ce04d3a99e08e73b$var$amount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","event","preventDefault","delay1","parseInt","value","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.3900a6b5.js.map"}